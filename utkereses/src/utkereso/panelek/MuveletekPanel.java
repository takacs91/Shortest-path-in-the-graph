package utkereso.panelek;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import utkereso.graf.*;
import utkereso.algoritmusok.*;

/**
 *
 * @author Takacs Peter
 */
public class MuveletekPanel extends javax.swing.JPanel {

    private final Graf graf;
  
    public MuveletekPanel(Graf graf) {
        initComponents();
        this.graf = graf;
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JToolBar cimBar = new JToolBar();
        JPanel cimPanel = new JPanel();
        JLabel cimLabel = new JLabel();
        JScrollPane sugoPane = new JScrollPane();
        JLabel sugoLabel2 = new JLabel();
        jPanel1 = new JPanel();
        nevLabel = new JLabel();
        algoritmusComboBox = new JComboBox();
        eredmenyButton = new JButton();
        JCheckBox negSulyCheckBox = new JCheckBox();
        jPanel2 = new JPanel();
        jScrollPane1 = new JScrollPane();
        eredmenyTextArea = new JTextArea();

        cimBar.setFloatable(false);
        cimBar.setRollover(true);
        cimBar.setMaximumSize(new Dimension(32769, 32769));

        cimPanel.setMinimumSize(new Dimension(0, 0));

        cimLabel.setFont(new Font("Tahoma", 0, 18)); // NOI18N
        cimLabel.setText("Műveletek");

        GroupLayout cimPanelLayout = new GroupLayout(cimPanel);
        cimPanel.setLayout(cimPanelLayout);
        cimPanelLayout.setHorizontalGroup(
            cimPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(cimPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cimLabel)
                .addContainerGap(202, Short.MAX_VALUE))
        );
        cimPanelLayout.setVerticalGroup(
            cimPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
            .addGroup(cimPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cimLabel)
                .addContainerGap())
        );

        cimBar.add(cimPanel);

        sugoPane.setBorder(BorderFactory.createTitledBorder("Súgó"));
        sugoPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sugoPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        sugoLabel2.setText("<html>\n<dl>\n\t<dt>Bal gomb:</dt>\n\t<dd>csúcs létrehozása<br>csúcs mozgatása</dd>\n</dl>\n<dl>\n\t<dt>Jobb gomb:</dt>\n\t<dd>él rajzolása</dd>\n</dl>\n<dl>\n\t<dt><i>A gráf az algoritmus lefutása után tovább <br>szerkeszthető és újból vizsgálható!</i></dt>\n</dl>\n</html>");
        sugoLabel2.setVerticalAlignment(SwingConstants.TOP);
        sugoPane.setViewportView(sugoLabel2);
        sugoLabel2.getAccessibleContext().setAccessibleName("");

        jPanel1.setBorder(BorderFactory.createTitledBorder("Algoritmus"));

        nevLabel.setText("Név:");

        algoritmusComboBox.setModel(new DefaultComboBoxModel(new String[] { "Dijkstra\t", "Bellman-Ford", "Floyd-Warshall" }));

        eredmenyButton.setText("Eredmény");
        eredmenyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                eredmenyButtonActionPerformed(evt);
            }
        });

        negSulyCheckBox.setText("Negatív élsúly engedélyezése");
        negSulyCheckBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                negSulyCheckBoxItemStateChanged(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nevLabel)
                        .addGap(18, 18, 18)
                        .addComponent(algoritmusComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eredmenyButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(negSulyCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(nevLabel)
                    .addComponent(algoritmusComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(eredmenyButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(negSulyCheckBox)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(BorderFactory.createTitledBorder("Eredmény"));

        eredmenyTextArea.setEditable(false);
        eredmenyTextArea.setColumns(10);
        eredmenyTextArea.setRows(5);
        jScrollPane1.setViewportView(eredmenyTextArea);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(cimBar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(sugoPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cimBar, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sugoPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents
 
    private void negSulyCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_negSulyCheckBoxItemStateChanged
        graf.setNegSuly();
    }//GEN-LAST:event_negSulyCheckBoxItemStateChanged
    
    private void eredmenyButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_eredmenyButtonActionPerformed
        int i = algoritmusComboBox.getSelectedIndex();
        switch(i){
            case 0:
                Dijkstra alg1 = new Dijkstra(graf);
                alg1.alap();
                alg1.eredmeny();
                //alg1.kiirat();
                    
                if(alg1.isNegativSuly()) 
                    eredmenyTextArea.append("\n A program a negatív élsúlyok abszolút\n értékével számolt!\n");
                eredmenyTextArea.append("\n 1.csúcs: Ez a forrás.");
                   
                for (int k = 1 ; k < alg1.P.length ; k++) 
                {        
                    if(alg1.P[k] != -1)
                    {
                        eredmenyTextArea.append("\n "+(k+1)+".csúcs megelőzője: "+alg1.P[k]+".csúcs"); 
                    }
                    else
                    {
                        eredmenyTextArea.append("\n "+(k+1)+".csúcs megelőzője: Nincs út!");
                    }
                }
                eredmenyTextArea.append("\n------------------------------------------------------------");
                break;
            case 1:
                BellmanFord alg2 = new BellmanFord(graf);
                alg2.alap();
                alg2.eredmeny();
                if(alg2.volt_kor())
                {
                    eredmenyTextArea.append("\n Hiba! Negatív összhosszúságú kört tartalmaz\n a vizsgált gráf!");
                    eredmenyTextArea.append("\n------------------------------------------------------------");
                }
                else
                {
                    eredmenyTextArea.append("\n 1.csúcs: Ez a forrás.");
                    for (int k = 1 ; k < alg2.P.length ; k++) 
                    {        
                        if(alg2.P[k] != -1)
                        {
                            eredmenyTextArea.append("\n "+(k+1)+".csúcs megelőzője: "+alg2.P[k]+".csúcs"); 
                        }
                        else
                        {
                            eredmenyTextArea.append("\n "+(k+1)+".csúcs megelőzője: Nincs út!");
                        }
                    }
                    eredmenyTextArea.append("\n------------------------------------------------------------");
                }
                //alg2.kiirat();
                alg2.kor = false;
                break;
            case 2:
                FloydWarshall alg3 = new FloydWarshall(graf);
                alg3.alap();
                alg3.eredmeny();
                
                if(alg3.volt_kor())
                {
                    eredmenyTextArea.append("\n Hiba! Negatív összhosszúságú kört tartalmaz\n a vizsgált gráf!");
                    eredmenyTextArea.append("\n------------------------------------------------------------");
                }
                else
                {
                    eredmenyTextArea.append("\n Az alábbi csúcspárok között létezik út:");
                    for(int m = 0 ; m < graf.getCsucsokSzama() ; m++)
                    {
                        for(int n = 0 ; n < graf.getCsucsokSzama() ; n++)
                        {
                            if((alg3.D[m][n] != Double.POSITIVE_INFINITY) && (alg3.D[m][n] != 0))
                            {
                                eredmenyTextArea.append("\n "+(m+1)+"-"+(n+1)+": Költség: "+Math.round(alg3.D[m][n]));
                            }
                        }
                    }
                    
                    eredmenyTextArea.append("\n\n Az utak mátrixa:\n");  
                    String str = "1. |  ";
                    for(int p=0;p<graf.getCsucsokSzama();p++){
                        for(int j=0;j<graf.getCsucsokSzama();j++){
                            str += alg3.P[p][j] + "  ";
                    }
                        eredmenyTextArea.append(str + "|\n");
                        str = p+2+". |  ";
                    }
                    eredmenyTextArea.append("\n------------------------------------------------------------");
                }
                //alg3.kiirat();
                alg3.kor = false;
                break;
        }
    }//GEN-LAST:event_eredmenyButtonActionPerformed
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox algoritmusComboBox;
    private JButton eredmenyButton;
    private JTextArea eredmenyTextArea;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JLabel nevLabel;
    // End of variables declaration//GEN-END:variables
}

